# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W5ilFlgrMRZpmcPHv8lg-ERTwRkbk9b5
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_olivetti_faces
from sklearn.decomposition import PCA

# Carregar a base Olivetti
data = fetch_olivetti_faces(shuffle=True, random_state=42)  # Com shuffle
faces = data.images      # Formato: (400, 64, 64)
X = data.data            # Formato: (400, 4096) - Matriz de atributos
y = data.target          # Rótulos: 0 a 39

print("Formato das imagens:", faces.shape)
print("Formato dos dados:", X.shape)

# Visualizar uma imagem
def mostra_imagem(img_vector):
    plt.imshow(img_vector.reshape(64, 64), cmap='gray')
    plt.axis('off')
    plt.show()

# Exemplo:
mostra_imagem(X[399])

# Matriz dos Componentes + Autovalores
# Obter autovalores (variância explicada)
n_components = 10
pca_eigenfaces = PCA(n_components=n_components).fit(X)

autovalores = pca_eigenfaces.explained_variance_ratio_

# Preparar matriz para plotar
# Cada linha: [autovalor | componentes (4096 pixels)]
matriz_plot = np.zeros((n_components, 1 + 4096))  # 1 coluna pro autovalor + 4096 pixels

for i in range(n_components):
    matriz_plot[i, 0] = autovalores[i]  # autovalor na primeira coluna
    matriz_plot[i, 1:] = pca_eigenfaces.components_[i]  # pesos dos pixels

# Plotar como imagem
plt.figure(figsize=(15, 5))
plt.imshow(matriz_plot, aspect='auto', cmap='gray')
plt.colorbar(label='Peso / Variância')
plt.title('Matriz dos Componentes Principais (Primeira coluna = autovalores)')
plt.xlabel('Pixels (1 = autovalor | 2~4097 = pixels)')
plt.ylabel('Componentes principais')
plt.show()

# PCA para projeção 2D
pca_2d = PCA(n_components=2)
X_pca = pca_2d.fit_transform(X)

print("Variância explicada por cada componente:", pca_2d.explained_variance_ratio_)
print("Soma da variância explicada:", np.sum(pca_2d.explained_variance_ratio_))

# Plot da projeção PCA
plt.figure(figsize=(10, 8))
scatter = plt.scatter(
    X_pca[:, 0], X_pca[:, 1],
    c=y, cmap='tab20',
    edgecolor='k', alpha=0.7
)
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.title('Projeção das faces Olivetti nas 2 primeiras componentes PCA')
plt.colorbar(scatter, ticks=range(40), label='Classe')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_olivetti_faces
from sklearn.decomposition import PCA

# Carregar a base Olivetti
data = fetch_olivetti_faces(shuffle=False)  # Mantém a sequência original
faces_raw = data.images  # (400, 64, 64)

# Montar a matriz
faces = faces_raw.reshape(400, -1)  # Cada linha é uma imagem vetorizada (64x64=4096)
print("Formato da matriz faces:", faces.shape)

# Gerar os rótulos manualmente
y_manual = np.repeat(np.arange(1, 41), 10)  # De 1 a 40
print("Vetor de rótulos gerado (primeiros 20):", y_manual[:20])

# Verificar se bate com o y do sklearn (ajustado de 0 a 39):
y_sklearn = data.target + 1  # Ajuste para ficar de 1 a 40
assert np.array_equal(y_manual, y_sklearn), "Os rótulos não batem!"

# Função para mostrar uma imagem
def mostra_imagem(x):
    plt.imshow(x.reshape(64, 64), cmap='gray')
    plt.axis('off')
    plt.show()

# Mostrar uma amostra
mostra_imagem(faces[0])

# Matriz dos Componentes + Autovalores
# Obter autovalores (variância explicada)
n_components = 10
pca_eigenfaces = PCA(n_components=n_components).fit(faces)

autovalores = pca_eigenfaces.explained_variance_ratio_

# Preparar matriz para plotar
# Cada linha: [autovalor | componentes (4096 pixels)]
matriz_plot = np.zeros((n_components, 1 + 4096))  # 1 coluna pro autovalor + 4096 pixels

for i in range(n_components):
    matriz_plot[i, 0] = autovalores[i]  # autovalor na primeira coluna
    matriz_plot[i, 1:] = pca_eigenfaces.components_[i]  # pesos dos pixels

# Plotar como imagem
plt.figure(figsize=(15, 5))
plt.imshow(matriz_plot, aspect='auto', cmap='gray')
plt.colorbar(label='Peso / Variância')
plt.title('Matriz dos Componentes Principais (Primeira coluna = autovalores)')
plt.xlabel('Pixels (1 = autovalor | 2~4097 = pixels)')
plt.ylabel('Componentes principais')
plt.show()

# PCA para projeção 2D
pca_2d = PCA(n_components=2)
faces_pca = pca_2d.fit_transform(faces)

print("Variância explicada:", pca_2d.explained_variance_ratio_)
print("Soma da variância explicada:", np.sum(pca_2d.explained_variance_ratio_))

# Plot da projeção PCA 2D
plt.figure(figsize=(10, 8))
scatter = plt.scatter(
    faces_pca[:, 0], faces_pca[:, 1],
    c=y_manual, cmap='tab20',
    edgecolor='k', alpha=0.7
)
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.title('Projeção PCA das faces Olivetti (2 componentes)')
plt.colorbar(scatter, ticks=range(1, 41), label='Classe (Pessoa)')
plt.grid(True)
plt.show()